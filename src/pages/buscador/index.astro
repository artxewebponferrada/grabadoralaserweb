---
import Layout from '../../layouts/Layout.astro';
import ProductCard from '../../components/ProductCard.astro';
import productsData from '../../data/products.json';
import categoriesData from '../../data/categories.json';

// Verificación y asignación segura de datos
const now = new Date();
const products = Array.isArray(productsData.products) 
  ? productsData.products
    .filter(product => new Date(product.publishDate) <= now)
    .sort((a, b) => (b.rating || 0) - (a.rating || 0))
  : [];
const categories = Array.isArray(categoriesData.categories) ? categoriesData.categories : [];

// Obtener marcas únicas desde los productos
const brands = [...new Set(products.map(product => product.brand).filter(Boolean))].map(brand => ({
  id: brand,
  name: brand.charAt(0).toUpperCase() + brand.slice(1) // Capitalizar nombres de marcas
}));

// Obtener valoraciones únicas
const ratings = [...new Set(products.map(product => Math.floor(product.rating || 0)))].sort((a, b) => b - a);
---

<Layout
  title="Buscador de Grabadores Láser"
  description="Encuentra el grabador láser perfecto para ti. Filtra por marca, categoría y valoración"
>
  <div class="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
    <header class="text-center mb-12">
      <h1 class="text-4xl font-extrabold text-gray-900 mb-4">Buscador de Grabadores Láser</h1>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto">
        Encuentra el grabador láser perfecto para tus necesidades utilizando nuestros filtros.
      </p>
    </header>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- Sidebar de Filtros -->
      <aside class="lg:col-span-1">
        <div class="bg-white rounded-2xl shadow-sm p-6 sticky top-24">
          <h2 class="text-lg font-semibold text-gray-900 mb-6">Filtros</h2>

          <!-- Búsqueda -->
          <div class="mb-6">
            <label for="search" class="block text-sm font-medium text-gray-700 mb-2">Buscar</label>
            <input
              type="text"
              id="search"
              class="w-full rounded-lg border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
              placeholder="Buscar productos..."
            />
          </div>

          <!-- Filtro de Marcas -->
          <div class="mb-6">
            <details class="group" open={!Astro.request.url.includes('mobile')}>
              <summary class="flex justify-between items-center cursor-pointer mb-2">
                <h3 class="text-sm font-medium text-gray-700">Marcas</h3>
                <svg
                  class="w-5 h-5 text-gray-500 group-open:rotate-180 transition-transform"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </summary>
              <div class="mt-3 grid grid-cols-1 gap-2 max-h-48 overflow-y-auto pr-2">
                {brands.map(brand => (
                  <label class="flex items-center">
                    <input type="checkbox" value={brand.id}
                      class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                      data-filter="brand"
                    />
                    <span class="ml-2 text-sm text-gray-600">{brand.name}</span>
                  </label>
                ))}
              </div>
            </details>
          </div>

          <!-- Filtro de Categorías -->
          <div class="mb-6">
            <details class="group" open={!Astro.request.url.includes('mobile')}>
              <summary class="flex justify-between items-center cursor-pointer mb-2">
                <h3 class="text-sm font-medium text-gray-700">Categorías</h3>
                <svg
                  class="w-5 h-5 text-gray-500 group-open:rotate-180 transition-transform"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </summary>
              <div class="mt-3 grid grid-cols-1 gap-2 max-h-48 overflow-y-auto pr-2">
                {categories.map(category => (
                  <label class="flex items-center">
                    <input type="checkbox" value={category.id}
                      class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                      data-filter="category"
                    />
                    <span class="ml-2 text-sm text-gray-600">{category.title}</span>
                  </label>
                ))}
              </div>
            </details>
          </div>

          <!-- Filtro de Valoraciones -->
          <div class="mb-6">
            <details class="group" open={!Astro.request.url.includes('mobile')}>
              <summary class="flex justify-between items-center cursor-pointer mb-2">
                <h3 class="text-sm font-medium text-gray-700">Valoración</h3>
                <svg
                  class="w-5 h-5 text-gray-500 group-open:rotate-180 transition-transform"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </summary>
              <div class="mt-3 grid grid-cols-1 lg:grid-cols-3 gap-2">
                {ratings.map(rating => (
                  <label class="flex items-center">
                    <input type="checkbox" value={rating}
                      class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                      data-filter="rating"
                    />
                    <span class="ml-2 flex items-center text-sm text-gray-600">
                      {rating}+ estrellas
                    </span>
                  </label>
                ))}
              </div>
            </details>
          </div>

          <button id="clearFilters" class="w-full px-4 py-2 text-sm font-medium text-primary-600 bg-primary-50 rounded-lg hover:bg-primary-100 transition-colors">
            Limpiar filtros
          </button>
        </div>
      </aside>

      <!-- Grid de Productos -->
      <div class="lg:col-span-3">
        <div id="productsGrid" class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
          {products.map((product) => (
            <div class="product-card"
              data-brand={product.brand}
              data-categories={JSON.stringify(product.categories)}
              data-rating={Math.floor(product.rating || 0)}
              data-title={product.title.toLowerCase()}
            >
              <ProductCard {...product} />
            </div>
          ))}
        </div>

        <!-- Mensaje de "No Resultados" -->
        <div id="noResults" class="hidden text-center py-12">
          <h3 class="text-lg font-medium text-gray-900 mb-2">No se encontraron productos</h3>
          <p class="text-gray-600">Intenta ajustar los filtros de búsqueda</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Función para aplicar los filtros
  function applyFilters() {
    const searchTerm = (document.getElementById('search') as HTMLInputElement).value.toLowerCase();
    const selectedBrands = Array.from(document.querySelectorAll<HTMLInputElement>('input[data-filter="brand"]:checked')).map(input => input.value);
    const selectedCategories = Array.from(document.querySelectorAll<HTMLInputElement>('input[data-filter="category"]:checked')).map(input => input.value);
    const selectedRatings = Array.from(document.querySelectorAll<HTMLInputElement>('input[data-filter="rating"]:checked')).map(input => parseInt(input.value));

    const productCards = document.querySelectorAll('.product-card');
    let visibleProducts = 0;

    productCards.forEach(card => {
      const brand = card.getAttribute('data-brand');
      const categories = JSON.parse(card.getAttribute('data-categories') || '[]');
      const rating = parseInt(card.getAttribute('data-rating') || '0');
      const title = card.getAttribute('data-title') || '';

      const matchesSearch = !searchTerm || title.includes(searchTerm);
      const matchesBrand = selectedBrands.length === 0 || selectedBrands.includes(brand);
      const matchesCategory = selectedCategories.length === 0 || categories.some((cat: string) => selectedCategories.includes(cat));
      const matchesRating = selectedRatings.length === 0 || selectedRatings.some(r => rating >= r);

      const isVisible = matchesSearch && matchesBrand && matchesCategory && matchesRating;
      card.classList.toggle('hidden', !isVisible);
      
      if (isVisible) visibleProducts++;
    });

    // Mostrar/ocultar mensaje de "No resultados"
    const noResults = document.getElementById('noResults');
    if (noResults) {
      noResults.classList.toggle('hidden', visibleProducts > 0);
    }
  }

  // Event listeners
  document.getElementById('search')?.addEventListener('input', applyFilters);
  document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
    checkbox.addEventListener('change', applyFilters);
  });

  // Limpiar filtros
  document.getElementById('clearFilters')?.addEventListener('click', () => {
    (document.getElementById('search') as HTMLInputElement).value = '';
    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
      (checkbox as HTMLInputElement).checked = false;
    });
    applyFilters();
  });

  // Manejar los desplegables en móvil
  if (window.innerWidth < 1024) {
    document.querySelectorAll('details').forEach(detail => {
      detail.removeAttribute('open');
    });
  }
</script>

<style>
  .max-h-48 {
    scrollbar-width: thin;
    scrollbar-color: #e2e8f0 #ffffff;
  }

  .max-h-48::-webkit-scrollbar {
    width: 6px;
  }

  .max-h-48::-webkit-scrollbar-track {
    background: #ffffff;
  }

  .max-h-48::-webkit-scrollbar-thumb {
    background-color: #e2e8f0;
    border-radius: 3px;
  }
</style>